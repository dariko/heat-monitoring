heat_template_version: 2018-08-31
parameters:
# not giving a default for REQ.network causes horizon to show the error
# "ERROR: The Parameter (REQ.network) was not provided."
# instead of showing the parameters mask
# It works as expected if the resource `_network` (with external_id
# == REQ.network) is removed.
# Still, it is necessary to infer the subnet for the loadbalancer
    REQ.network:
        type: string
        constraints:
        -   custom_constraint: neutron.network
        default: ""

    REQ.image:
        type: string
        constraints:
        -   custom_constraint: glance.image

    REQ.dns_suffix:
        type: string
    REQ.api_auth_url:
        type: string

    grafana_ldap_admin_groups:
        type: comma_delimited_list
        default: infrastructure

    grafana_ldap_viewer_groups:
        type: comma_delimited_list
        default: ""

    root_volume_size:
        type: number
        default: 10
    root_volume_type:
        type: string
        default: ceph

    prometheus_volume_type:
        type: string
        default: ceph
    prometheus_volume_size:
        type: number
        default: 15

    flavor_prometheus:
        type: string
        default: sys.2c4r
    flavor_grafana:
        type: string
        default: sys.2c4r

    deploy_version:
        type: string
        default: master

    scale_prometheus:
        type: number
        default: 1

    scale_grafana:
        type: number
        default: 1

    node_exporter_security_group_name:
        type: string
        default: node_exporter

conditions:
    do_loadbalancer:
        not:
            equals:
            -   {get_param: scale_grafana}
            -   1
resources:
    _network:
        type: OS::Neutron::Net
        external_id: {get_param: REQ.network}

    _project:
        type: OS::Keystone::Project
        external_id: {get_param: OS::project_id}

    prometheus_user_name:
        type: OS::Heat::Value
        properties:
            value:
                str_replace:
                    params:
                        $project_name: {get_attr: [_project, name]}
                    template:
                        prometheus-discovery-$project_name

    prometheus_user_password:
        type: OS::Heat::RandomString

    prometheus_user:
        type: OS::Keystone::User
        properties:
            name: {get_attr: [prometheus_user_name, value]}
            domain: default
            password: {get_attr: [prometheus_user_password, value]}

    prometheus_user_role_assignment:
        type: OS::Keystone::UserRoleAssignment
        properties:
            user: {get_resource: prometheus_user}
            roles:
            -   project: {get_resource: _project}
                role: _member_

    node_exporter_security_group:
        type: OS::Neutron::SecurityGroup
        properties:
            name: {get_param: node_exporter_security_group_name}
            rules:
            -   protocol: tcp
                port_range_min: 9100
                port_range_max: 9100
                remote_mode: remote_group_id
                remote_group_id: {get_resource: prometheus_security_group}

    grafana_security_group:
        type: OS::Neutron::SecurityGroup
        properties:
            rules:
            -   protocol: tcp
                port_range_min: 22
                port_range_max: 22
            -   protocol: tcp
                port_range_min: 3000
                port_range_max: 3000
            -   protocol: icmp

    prometheus_security_group:
        type: OS::Neutron::SecurityGroup
        properties:
            rules:
            -   protocol: tcp
                port_range_min: 22
                port_range_max: 22
            -   protocol: tcp
                port_range_min: 9090
                port_range_max: 9090
                remote_mode: remote_group_id
                remote_group_id: {get_resource: grafana_security_group}

    loadbalancer:
        condition: do_loadbalancer
        type: OS::Octavia::LoadBalancer
        properties:
            vip_subnet: {get_attr: [_network, subnets, 0]}

    listener_tcp80:
        condition: do_loadbalancer
        type: OS::Octavia::Listener
        properties:
            loadbalancer: {get_resource: loadbalancer}
            protocol: TCP
            protocol_port: 80

    pool_grafana:
        condition: do_loadbalancer
        type: OS::Octavia::Pool
        properties:
            lb_algorithm: ROUND_ROBIN
            listener: {get_resource: listener_tcp80}
            protocol: TCP

    pool_grafana_healthmonitor:
        condition: do_loadbalancer
        type: OS::Octavia::HealthMonitor
        properties:
            delay: 3
            max_retries: 2
            timeout: 2
            type: TCP
            pool: {get_resource: pool_grafana}

    keypair:
        type: OS::Nova::KeyPair
        properties:
            save_private_key: yes
            name: {list_join: ["-", ["ansible-runner", {get_param: OS::stack_id}]]}

    prometheus_servers:
        type: OS::Heat::ResourceGroup
        properties:
            count: {get_param: scale_prometheus}
            resource_def:
                type: OS::Heat::Stack
                properties:
                    parameters:
                        network: {get_param: REQ.network}
                        keypair: {get_resource: keypair}
                        volume_type: {get_param: root_volume_type}
                        volume_size: {get_param: root_volume_size}
                        data_volume_type: {get_param: prometheus_volume_type}
                        data_volume_size: {get_param: prometheus_volume_size}
                        image: {get_param: REQ.image}
                        flavor: {get_param: flavor_prometheus}
                        security_groups:
                        -   {get_resource: prometheus_security_group}
                        -   {get_resource: node_exporter_security_group}
                        dns_suffix: {get_param: REQ.dns_suffix}
                    template: |
                        heat_template_version: 2018-08-31
                        parameters:
                            image:
                                type: string
                            volume_type:
                                type: string
                            volume_size:
                                type: string
                            data_volume_type:
                                type: string
                            data_volume_size:
                                type: string
                            network:
                                type: string
                            flavor:
                                type: string
                            keypair:
                                type: string
                            security_groups:
                                type: json
                            dns_suffix:
                                type: string
                        resources:
                            name:
                                type: OS::Heat::Value
                                properties:
                                    value:
                                        str_replace:
                                            template: prometheus-%index%$dns_suffix
                                            params:
                                                $dns_suffix: {get_param: dns_suffix}
                            port:
                                type: OS::Neutron::Port
                                properties:
                                    network: {get_param: network}
                                    security_groups: {get_param: security_groups}
                            root_volume:
                                type: OS::Cinder::Volume
                                properties:
                                    image: {get_param: image}
                                    size: {get_param: volume_size}
                                    volume_type: {get_param: volume_type}
                            data_volume:
                                type: OS::Cinder::Volume
                                properties:
                                    size: {get_param: data_volume_size}
                                    volume_type: {get_param: data_volume_type}
                            data_volume_attachment:
                                type: OS::Cinder::VolumeAttachment
                                properties:
                                    instance_uuid: {get_resource: server}
                                    volume_id: {get_resource: data_volume}
                                    mountpoint: /dev/vdb
                            server:
                                type: OS::Nova::Server
                                properties:
                                    networks:
                                    -   port: {get_resource: port}
                                    block_device_mapping_v2:
                                    -   volume_id: {get_resource: root_volume}
                                    name: {get_attr: [name, value]}
                                    flavor: {get_param: flavor}
                                    user_data_format: SOFTWARE_CONFIG
                                    key_name: {get_param: keypair}
                        outputs:
                            name:
                                value: {get_attr: [name, value]}

    grafana_servers:
        type: OS::Heat::ResourceGroup
        properties:
            count: {get_param: scale_grafana}
            resource_def:
                type: OS::Heat::Stack
                properties:
                    parameters:
                        network: {get_param: REQ.network}
                        keypair: {get_resource: keypair}
                        volume_type: {get_param: root_volume_type}
                        volume_size: {get_param: root_volume_size}
                        image: {get_param: REQ.image}
                        flavor: {get_param: flavor_grafana}
                        security_groups:
                        -   {get_resource: grafana_security_group}
                        -   {get_resource: node_exporter_security_group}
                        pool:
                            if:
                            -   do_loadbalancer
                            -   {get_resource: pool_grafana}
                            -   ""
                        dns_suffix: {get_param: REQ.dns_suffix}
                    template: |
                        heat_template_version: 2018-08-31
                        parameters:
                            image:
                                type: string
                            volume_type:
                                type: string
                            volume_size:
                                type: string
                            network:
                                type: string
                            flavor:
                                type: string
                            keypair:
                                type: string
                            security_groups:
                                type: json
                            pool:
                                type: string
                            dns_suffix:
                                type: string
                        conditions:
                            do_pool:
                                not:
                                    equals:
                                    -   {get_param: pool}
                                    -   ""
                        resources:
                            name:
                                type: OS::Heat::Value
                                properties:
                                    value:
                                        str_replace:
                                            template: grafana-%index%$dns_suffix
                                            params:
                                                $dns_suffix: {get_param: dns_suffix}
                            pool_member:
                                condition: do_pool
                                type: OS::Octavia::PoolMember
                                properties:
                                    address: {get_attr: [port, fixed_ips, 0, ip_address]}
                                    pool: {get_param: pool}
                                    protocol_port: 3000
                            port:
                                type: OS::Neutron::Port
                                properties:
                                    network: {get_param: network}
                                    security_groups: {get_param: security_groups}
                            root_volume:
                                type: OS::Cinder::Volume
                                properties:
                                    image: {get_param: image}
                                    size: {get_param: volume_size}
                                    volume_type: {get_param: volume_type}
                            server:
                                type: OS::Nova::Server
                                properties:
                                    networks:
                                    -   port: {get_resource: port}
                                    block_device_mapping_v2:
                                    -   volume_id: {get_resource: root_volume}
                                    name: {get_attr: [name, value]}
                                    flavor: {get_param: flavor}
                                    user_data_format: SOFTWARE_CONFIG
                                    key_name: {get_param: keypair}
                        outputs:
                            name:
                                value: {get_attr: [name, value]}
                            ip:
                                value: {get_attr: [server, addresses, {get_param: network}, 0, addr] }

    ansible_inventory:
        type: OS::Heat::Value
        properties:
            value:
                str_replace:
                    params:
                        $prometheus_names:
                            list_join:
                            -   "\n"
                            -   {get_attr: [prometheus_servers, outputs, name]}
                        $grafana_names:
                            list_join:
                            -   "\n"
                            -   {get_attr: [grafana_servers, outputs, name]}
                        $prometheus_user_id: {get_resource: prometheus_user}
                        $prometheus_user_password: {get_attr: [prometheus_user_password, value]}
                        $api_auth_url: {get_param: REQ.api_auth_url}
                        $project_id: {get_resource: _project}
                        $grafana_ldap_admin_groups: {get_param: grafana_ldap_admin_groups}
                        $grafana_ldap_viewer_groups: {get_param: grafana_ldap_viewer_groups}
                    template: |
                        [grafana]
                        $grafana_names
                        [prometheus]
                        $prometheus_names
                        [prometheus:vars]
                        prometheus_openstack_discovery_user_id=$prometheus_user_id
                        prometheus_openstack_discovery_password=$prometheus_user_password
                        openstack_auth_url=$api_auth_url
                        openstack_project_id=$project_id
                        grafana_ldap_admin_groups=$grafana_ldap_admin_groups
                        grafana_ldap_viewer_groups=$grafana_ldap_viewer_groups

    ansible_runner:
        type: https://raw.githubusercontent.com/dariko/heat-ansible_runner/794697557722324d44fba33265fd5aba9d2e7928/cloudconfig.yaml
        properties:
            ssh_key:
                get_attr:
                -   keypair
                -   private_key
            image: {get_param: REQ.image}
            hostname:
                str_replace:
                    template: ansible$dns_suffix
                    params:
                        $dns_suffix: {get_param: REQ.dns_suffix}
            inventory: {get_attr: [ansible_inventory, value]}
            inventory_paths:
            -   inventory/
            repository_url: https://github.com/dariko/heat-monitoring
            repository_version: {get_param: deploy_version}
            network: {get_resource: _network}
            playbook_name: site.yml

outputs:
    grafana_url:
        value:
            str_replace:
                params:
                    ip:
                        if:
                        -   do_loadbalancer
                        -   loadbalancer_vip: {get_attr: [loadbalancer, vip_address]}
                        -   yaql:
                                expression: $.data[0]
                                data: {get_attr: [grafana_servers, outputs, ip]}
                template: http://ip
